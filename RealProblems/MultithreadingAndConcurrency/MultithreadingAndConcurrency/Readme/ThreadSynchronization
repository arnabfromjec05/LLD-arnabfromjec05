Thread synchronization:
Since threads shares the common address space of the process, often times it's intended that only one thread
accesses the shared memory location. This can be achieved by thread synchronization.
ex:- in Booking movie tickets or train tickets, the seat availability variable is updated once the thread completes
the booking, meanwhile other threads shouldn't be allowed to update the seat availability as it's a critical section
and scenario can lead to race conditions.

synchronized (used for mutex in java) -->
1. synchronized(Object obj) - Used to lock a given code block.
2. defining function as synchronized -
public synchronized boolean func() {} -> here it means synchronized(this) over the entire func() block
for static methods: synchronized will boil down to synchronized(<className>.class)

- If a function is defined as synchronized in a class, it's derived class may or mayn't retain the synchronized attribute
of the overridden method.

wait notify and notifyAll -->
- lockObject.wait(): all threads move to waiting state until notify() or notifyAll() called on the locking object
- lockObject.notify(): only one thread currently in waiting state will be awakened to go to block state.
- lockObject.notifyAll(): all the waiting threads on the lockObject will be awakened to go to block state.

Note: Thread in block state (block for acquisition) don't directly go to runnable state, they should compete to
reacquire the lock to move to runnable state.

binary semaphore and counting semaphore -->
- Semaphore obj = new Semaphore(0): initializes a semaphore object with value 0.
    - acquire(): obj.acquire() reduces the value of semaphore obj by 1. Blocking operation if value is currently 0.
    - release(): obj.release() increases the value of semaphore obj by 1. Non blocking operation.
    - semaphore object value if controlled between 0 or 1 is a binary semaphore and can work as mutex locks.
    - if value of this > 1 , it's a counting semaphore. Used to control access to limited set of non binary resources.

Deadlock:
It's a situation in multithreaded envt where one thread is holding resource A and waiting to acquire resource B, while
at the same time another thread is holding resource B and waiting to acquire resource A. When such cyclic dependency happens
at any state of the system, it leads to deadlock.

Volatile keyword use:
- Volatile keyword is yet another way (like synchronized) of making class thread-safe. Thread-safe means that a method
or class instance can be used by multiple threads at the same time without any problem.
- Volatile keyword tells the compiler to not store the value in threads local cache and always to read write from memory
to ensure consistency of value seen by other threads.
In BlockingQueue we used volatile specifier for Queue to tell that Queue's value will not be stored in local cache of
the thread anytime.